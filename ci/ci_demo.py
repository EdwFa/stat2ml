import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm, beta
import warnings
warnings.filterwarnings("ignore")

# --- –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ---
def wald_confidence_interval(x, n, confidence=0.95):
    if n == 0 or x < 0 or x > n:
        return (np.nan, np.nan)
    alpha = 1 - confidence
    z = norm.ppf(1 - alpha / 2)
    p_hat = x / n
    if p_hat == 0 or p_hat == 1:
        se = 0
    else:
        se = np.sqrt(p_hat * (1 - p_hat) / n)
    margin = z * se
    lower = max(0, p_hat - margin)
    upper = min(1, p_hat + margin)
    return (lower, upper)

def wilson_confidence_interval(x, n, confidence=0.95):
    if n == 0 or x < 0 or x > n:
        return (np.nan, np.nan)
    alpha = 1 - confidence
    z = norm.ppf(1 - alpha / 2)
    p_hat = x / n
    z2 = z ** 2
    denom = 1 + z2 / n
    center = p_hat + z2 / (2 * n)
    margin = z * np.sqrt((p_hat * (1 - p_hat) + z2 / (4 * n)) / n)
    lower = (center - margin) / denom
    upper = (center + margin) / denom
    return (max(0, lower), min(1, upper))

def agresti_coull_interval(x, n, confidence=0.95):
    alpha = 1 - confidence
    z = norm.ppf(1 - alpha / 2)
    z2 = z ** 2
    n_tilde = n + z2
    p_tilde = (x + z2 / 2) / n_tilde
    se = np.sqrt(p_tilde * (1 - p_tilde) / n_tilde)
    margin = z * se
    lower = max(0, p_tilde - margin)
    upper = min(1, p_tilde + margin)
    return (lower, upper)

def clopper_pearson_interval(x, n, confidence=0.95):
    alpha = 1 - confidence
    if x == 0:
        lower = 0.0
    else:
        lower = beta.ppf(alpha / 2, x, n - x + 1)
    if x == n:
        upper = 1.0
    else:
        upper = beta.ppf(1 - alpha / 2, x + 1, n - x)
    return (lower, upper)

def plus_4_interval(x, n, confidence=0.95):
    if abs(confidence - 0.95) > 0.01:  # –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
        return (np.nan, np.nan)  # –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
    x_adj = x + 2
    n_adj = n + 4
    p_adj = x_adj / n_adj
    z = 1.96  # z_{0.975}
    se = np.sqrt(p_adj * (1 - p_adj) / n_adj)
    margin = z * se
    lower = max(0, p_adj - margin)
    upper = min(1, p_adj + margin)
    return (lower, upper)


# --- –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
def plot_ci_comparison(n=50, confidence=0.95):
    """–°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö x –æ—Ç 0 –¥–æ n."""
    x_values = np.arange(0, n + 1)
    p_values = x_values / n

    methods = {
        "Wald": wald_confidence_interval,
        "Wilson": wilson_confidence_interval,
        "Agresti-Coull": agresti_coull_interval,
        "Clopper-Pearson": clopper_pearson_interval,
    }

    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Plus-4, –µ—Å–ª–∏ –Ω–µ 95%
    if abs(confidence - 0.95) < 0.01:
        methods["Plus-4"] = plus_4_interval

    plt.figure(figsize=(12, 8))

    colors = {
        "Wald": "red",
        "Wilson": "blue",
        "Agresti-Coull": "green",
        "Clopper-Pearson": "orange",
        "Plus-4": "purple"
    }

    for name, func in methods.items():
        lowers = []
        uppers = []
        for x in x_values:
            try:
                low, high = func(x, n, confidence)
                lowers.append(low if not np.isnan(low) else None)
                uppers.append(high if not np.isnan(high) else None)
            except:
                lowers.append(None)
                uppers.append(None)
        plt.plot(lowers, p_values, color=colors[name], linestyle='-', alpha=0.7)
        plt.plot(uppers, p_values, color=colors[name], linestyle='-', alpha=0.7, label=name)
        # –ó–∞–ª–∏–≤–∫–∞ –º–µ–∂–¥—É –Ω–∏–∂–Ω–µ–π –∏ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ–π
        plt.fill_betweenx(p_values, lowers, uppers, color=colors[name], alpha=0.1)

    plt.axvline(0, color='k', linewidth=0.5, linestyle='--')
    plt.axvline(1, color='k', linewidth=0.5, linestyle='--')
    plt.xlabel("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª")
    plt.ylabel("–í—ã–±–æ—Ä–æ—á–Ω–∞—è –¥–æ–ª—è $\\hat{p} = x/n$")
    plt.title(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (n = {n}, {confidence:.0%} –¥–æ–≤–µ—Ä–∏–µ)")
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xlim(-0.02, 1.02)
    plt.tight_layout()
    plt.show()


# --- –û—Ü–µ–Ω–∫–∞ "–ª—É—á—à–µ–≥–æ" –º–µ—Ç–æ–¥–∞ ---
def evaluate_method_coverage(method_func, n, p_true=0.5, confidence=0.95, n_sim=10000):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—Ä—ã—Ç–∏—è (coverage) –º–µ—Ç–æ–¥–∞ –ø—Ä–∏ –∏—Å—Ç–∏–Ω–Ω–æ–º p_true.
    p_true ‚Äî —ç—Ç–æ –≥–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∏ –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –Ω–µ –∑–Ω–∞–µ–º
    –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ, –Ω–æ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ü–∏—è—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∞–¥—ë–∂–Ω—ã —Ç–µ
    –∏–ª–∏ –∏–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"""
    covered = 0
    for _ in range(n_sim):
        x = np.random.binomial(n, p_true)
        try:
            low, high = method_func(x, n, confidence)
            if low <= p_true <= high:
                covered += 1
        except:
            continue
    coverage = covered / n_sim
    return coverage

def compare_methods_by_quality(n=30, p_true=0.5, confidence=0.95):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é –∏ —Å—Ä–µ–¥–Ω–µ–π —à–∏—Ä–∏–Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞."""
    methods = {
        "Wald": wald_confidence_interval,
        "Wilson": wilson_confidence_interval,
        "Agresti-Coull": agresti_coull_interval,
        "Clopper-Pearson": clopper_pearson_interval,
    }

    if abs(confidence - 0.95) < 0.01:
        methods["Plus-4"] = plus_4_interval

    results = []

    print(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–æ–≤ (n={n}, p_true={p_true}, {confidence:.0%} –¥–æ–≤–µ—Ä–∏–µ)")
    print(f"{'–ú–µ—Ç–æ–¥':<16} {'–ü–æ–∫—Ä—ã—Ç–∏–µ':<10} {'–°—Ä. —à–∏—Ä–∏–Ω–∞':<12} {'–ö–∞—á–µ—Å—Ç–≤–æ'}")
    print("-" * 50)

    for name, func in methods.items():
        coverages = []
        widths = []

        for _ in range(5000):  # –ú–æ–¥–µ–ª–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ x
            x = np.random.binomial(n, p_true)
            try:
                low, high = func(x, n, confidence)
                if np.isnan(low) or np.isnan(high):
                    continue
                coverages.append(p_true >= low and p_true <= high)
                widths.append(high - low)
            except:
                continue

        avg_coverage = np.mean(coverages) if coverages else np.nan
        avg_width = np.mean(widths) if widths else np.nan

        # –ö–∞—á–µ—Å—Ç–≤–æ: –±–ª–∏–∑–æ—Å—Ç—å –ø–æ–∫—Ä—ã—Ç–∏—è –∫ confidence –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
        coverage_error = abs(avg_coverage - confidence)
        score = -coverage_error * 1000 + (-avg_width * 100) if not np.isnan(avg_width) else -np.inf

        if avg_coverage >= confidence - 0.02 and avg_coverage <= confidence + 0.02:
            quality = "‚úÖ –•–æ—Ä–æ—à"
        elif avg_coverage > confidence:
            quality = "üü® –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–µ–Ω"
        else:
            quality = "‚ùå –ù–∏–∂–µ —Ç—Ä–µ–±."

        results.append((score, name, avg_coverage, avg_width, quality))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–æ—Ü–µ–Ω–∫–µ)
    results.sort(reverse=True)

    for _, name, cov, width, qual in results:
        print(f"{name:<16} {cov:<10.3f} {width:<12.3f} {qual}")

    print("\nüèÜ –õ—É—á—à–∏–π –º–µ—Ç–æ–¥ –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏:", results[0][1])
    return results[0][1]


# === –ó–ê–ü–£–°–ö –ü–†–ò–ú–ï–†–û–í ===
if __name__ == "__main__":
    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    plot_ci_comparison(n=100, confidence=0.9)

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
    best_method = compare_methods_by_quality(n=100, p_true=0.95, confidence=0.9)